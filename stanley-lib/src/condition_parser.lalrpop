use std::str::FromStr;
use ast::*;
grammar;

pub Condition: Box<Expression> = {
    Condition ExprOp Factor => Box::new(Expression::BinaryExpression(<>)),
    Factor,
};

Factor: Box<Expression> = {
    Factor FactorOp Term => Box::new(Expression::BinaryExpression(<>)),
    Term,
};

Term: Box<Expression> = {
    //Bool => Box::new(Expression::BooleanLiteral(<>)),
    Num => Box::new(Expression::Number(<>)),
    "(" <Condition> ")"
};

/////////////////////////////////////////////////////////////////////////////////////

ExprOp: BinaryOperator = {
    "+" => BinaryOperator::Addition,
    "-" => BinaryOperator::Subtraction,
};

FactorOp: BinaryOperator = {
    "*" => BinaryOperator::Multiplication,
    "/" => BinaryOperator::Division,
    "%" => BinaryOperator::Modulo,
};

//Bool: Box<bool> = {
    //"true" => Box::new(Expression::BooleanExpression(true)),
    //"false" => Box::new(Expression::BooleanExpression(false))
//};

Num: i32 = r"[0-9]+" => i32::from_str(<>).unwrap();