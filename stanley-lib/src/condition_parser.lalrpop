use std::str::FromStr;
use ast::*;
grammar;

pub Condition: Box<Expression> = {
    Condition ExprOp Factor => Box::new(Expression::BinaryExpression(<>)),
    Factor,
};

Factor: Box<Expression> = {
    Factor FactorOp Term => Box::new(Expression::BinaryExpression(<>)),
    Term,
};

Term: Box<Expression> = {
    BOOL => Box::new(Expression::BooleanLiteral(<>)),
    NUM => Box::new(Expression::Number(<>)),
    "(" <Condition> ")"
};

/////////////////////////////////////////////////////////////////////////////////////

ExprOp: BinaryOperator = {
    "+" => BinaryOperator::Addition,
    "-" => BinaryOperator::Subtraction,
};

FactorOp: BinaryOperator = {
    "*" => BinaryOperator::Multiplication,
    "/" => BinaryOperator::Division,
    "%" => BinaryOperator::Modulo,
};

IDENTIFIER: String = r"[a-zA-Z]+[0-9]*" => <>.to_string();

BOOL: bool = r"true|false" => bool::from_str(<>).unwrap();

NUM: i32 = r"[0-9]+" => i32::from_str(<>).unwrap();